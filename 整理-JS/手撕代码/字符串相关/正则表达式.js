/**
 * 处理复杂的字符串查找、替换
 * 正则表达式是匹配模式，要么匹配字符，要么匹配位置。
 * 
 * 应用：根据文件名查找文件、查找指定字符串
 */

// 1.字符
let mean = {
  d : '/\d 就是[0-9]。表示是一位数字。记忆方式：其英文是digit（数字）',
  D : '\D 就是[^0-9]。表示除数字外的任意字符。',
  w : '表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符',
  W : '\W是[^0-9a-zA-Z_]。非单词字符',
  s : '\s是[ \t\v\n\r\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。',
  S : '[^ \t\v\n\r\f]。 非空白符。',
  point : '.就是[^\n\r\u2028\u2029]。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外',
  // 如果要匹配任意字符怎么办？
  // 可以使用[\d\D]、[\w\W]、[\s\S]和[^]中任何的一个
}

// 2.量词
let LiangCi = [
  '{m,} 表示至少出现m次。',
  '{m} 等价于{m,m}，表示出现m次',
  '? 等价于{0,1}，表示出现或者不出现',
  '+ 等价于{1,}，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。',
  '* 等价于{0,}，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。'
]

// 3.贪婪匹配和惰性匹配。默认是贪婪的，它会尽可能多的匹配；通过在量词后面加个问号就能实现惰性匹配

// 贪婪匹配
var regex = /\d{2,5}/g;
var string = "123 1234 12345 123456";
console.log( string.match(regex) );
// => ["123", "1234", "12345", "12345"]

// 惰性匹配
var regex = /\d{2,5}?/g;
var string = "123 1234 12345 123456";
console.log( string.match(regex) );
// => ["12", "12", "34", "12", "34", "12", "34", "56"]

// 4.多选分支
// 具体形式如下：(p1|p2|p3)，其中p1、p2和p3是子模式，
// 用|（管道符）分隔，表示其中任何之一
var regex = /good|nice/g;
var string = "good idea, nice try.";
console.log( string.match(regex) );
// => ["good", "nice"]
